/********************************************************************************
 * Copyright (c) 2024 University of York and others
 *
 * Converter between RoboChartCSPMTraces and RoboChartTraces.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *   Pedro Ribeiro - initial definition
 *
 ********************************************************************************/

rule Top
	transform o : Source!RoboChartCSPMTraces
	to t : Target!RoboChartTraces
{
	t.roboTraces = o.roboTraces.equivalent();
	t.name = o.name + "mod";
	t.element = o.element;
}

@lazy
rule RCSPMTrace2RCTrace 
	transform o : Source!RCSPMTrace
	to t : Target!RCTrace
	{
		t.name = o.name;
		t.events = o.events.equivalent();
}

@lazy
rule RCSPMevent2RCEvent_Event_Enumeration
	transform o : Source!RCSPMEventRef
	to t : Target!RTRCEventRef
	{
		guard : o.ref.isKindOf(Source!Event) 
				
		o.expression.~target = o.ref.type;
		t.ref = o.ref;
		t.inout = o.inout;
		t.expression = o.expression.equivalent();
		//("Event: "+o.ref.name).println();
}

// Converts a call with arguments.
@lazy
rule RCSPMevent2RCEvent_OperationCall
	transform o : Source!RCSPMOperationCallRef
	to t : Target!RTRCOperationRef
	{
		guard : o.expression.isKindOf(Source!RTDotExp) 
			and o.expression.args.size() == o.ref.parameters.size()
				
		("Call: " + o.ref.name).println();
		t.inout = o.inout;
		
		var noArgs = o.expression.args.size();
		
		for (i : Int in noArgs) {
			o.expression.args[i].~target = o.ref.parameters[i].type;
			t.args[i] = o.expression.args[i].equivalent();
		}
		
}

@lazy
rule RCSPMevent2RCEvent_OperationCall
	transform o : Source!RCSPMOperationCallRef
	to t : Target!RTRCOperationRef
	{
		guard : o.expression == null and o.ref.parameters.size() == 0
				
		("Call no args: " + o.ref.name).println();
		t.ref = o.ref;
}

// Converts an integer exp making use of record types
@lazy
rule Integer2RecordExp
	transform o : Source!RTIntegerExp
	to t : Target!RecordExp
	{
		guard: 	o.~target <> null and
				o.~target.isKindOf(Source!TypeRef) and
				o.~target.ref.isKindOf(Source!RecordType)
				
		//("Integer2RecordExp: " + o.value).println();
		t.record = o.~target.ref;
		
		var field = new Target!FieldDefinition;
		field.field = t.record.fields.first();
		field.value = o.equivalent("IntegerExp");
		//("Field: "+ field.field).println();
		//("Value: "+ field.value).println();
		t.definitions.add(field);
		
}

// Converts literals into enum exprs.
@lazy
rule LiteralExp2Enu
	transform o : Source!RTLiteralExp
	to t : Target!EnumExp
	{
		// Only applicable if first string indicates an Enumeration!
		guard: 	o.~target <> null and
				o.~target.isKindOf(Source!TypeRef) and
				o.~target.ref.isKindOf(Source!Enumeration) and
				o.~target.ref.name == o.value.split("_").first()
		
		"Match in LiteralExp2Enu".println();		
		t.type = o.~target.ref;
		t.literal = o.~target.ref.literals.selectOne(e:Source!Literal|e.name == o.value.split("_").second());

		("Literal:"+ t.literal.name).println();
		("Enum:" + t.type.name).println();

}


// Converts regular integer expressions
@lazy
rule IntegerExp
	transform o : Source!RTIntegerExp
	to t : Target!IntegerExp
	{
		("IntegerExp: " + o.value).println();
		t.value = o.value;
		("IntegerExp: " + t.value).println();
}

@lazy
rule MinusExp
	transform o : Source!RTMinusExp
	to t : Target!Neg
	{
		("MinusExp: " + o.value).println();
		t.exp = o.value.equivalent();
}	
	